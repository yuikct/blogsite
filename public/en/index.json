


[{"content":"","date":"30 December 2024","externalUrl":null,"permalink":"/en/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"30 December 2024","externalUrl":null,"permalink":"/en/study/","section":"Studies","summary":"","title":"Studies","type":"study"},{"content":" 慢慢来比较快 我一直不希望自己只是一个写代码的前端程序员，对于前端，一直专注于构建现代化、用户界面的网页和应用。我热衷于探索前端技术的无限可能性，并将致力于复杂的事业技术实现与简洁优雅的用户体验相结合。无论是响应式设计、高效性能优化，还是构建的前端架构，我都始终追求代码的质量与效率。我相信，技术的核心在于解决问题。我不断学习新技术，不断进步，力求用代码为生活增添更多的便捷和美好。通过这个博客，我希望分享我在前端开发中的心得与经验，同时记录我在技术路上的成长。如果您对前端开发、技术分享或者其他话题感兴趣，欢迎一起交流！\n","date":"30 December 2024","externalUrl":null,"permalink":"/en/","section":"Welcome to Jinwoo and Lambda 🐱 's blog","summary":"","title":"Welcome to Jinwoo and Lambda 🐱 's blog","type":"page"},{"content":" 理论篇 # 前言 # 只适合少数人的作弊秘籍 # 有一种成功，是按自己喜欢的方式过一生。\n这本手册提供了一套方法论，可以帮助一部分人实现上述成功。具体来说，需要同时满足：\n有较强学习能力，渴望在某一领域做出成绩 给自己足够耐心，相信长期主义 乐于助人，能从“帮助他人”中收获成就感 客观的讲，这样的人在人群中不超过 30%，所以这并不是为大部分人准备的教科书，而是为少部分人准备的作弊秘籍。\n如果你自认是那少部分人，请愉快的往下阅读，你将收获一条不内卷、高稳定、有前景的事业新出路。\n职场为何如此艰难？\n什么是W.I.N第二曲线\n架构篇 # 什么是领域智慧？\n领域智慧从何而来？\n智慧涌现模型\n落地智慧涌现模型\n","date":"30 December 2024","externalUrl":null,"permalink":"/posts/win%E7%AC%AC%E4%BA%8C%E6%9B%B2%E7%BA%BF%E6%89%8B%E5%86%8C/","section":"博客","summary":"","title":"WIN第二曲线手册","type":"posts"},{"content":"","date":"30 December 2024","externalUrl":null,"permalink":"/en/categories/%E4%B8%AA%E4%BA%BA%E7%BB%8F%E9%AA%8C/","section":"Categories","summary":"","title":"个人经验","type":"categories"},{"content":"","date":"30 December 2024","externalUrl":null,"permalink":"/en/study/%E6%8F%90%E5%8D%87%E8%87%AA%E8%BA%AB%E8%83%BD%E9%87%8F/","section":"Studies","summary":"","title":"感觉自己身上没能量了怎么办","type":"study"},{"content":"","date":"29 December 2024","externalUrl":null,"permalink":"/en/categories/%E5%89%8D%E7%AB%AF/","section":"Categories","summary":"","title":"前端","type":"categories"},{"content":" 1、项目打包 # 我们开发用的脚手架其实就是一个微型服务器，用于：支撑开发环境、运行代理服务器等。 打包完的文件中不存在：.vue、.jsx、.less 等文件，而是：html、css、js等。 打包后的文件，不再借助脚手架运行，而是需要部署到服务器上运行。 打包前，请务必梳理好前端项目的ajax封装（请求前缀、代理规则等）。 2、本地服务器部署 # 2.1. 具体操作步骤 # 第一步：准备一个本地的服务器 本地服务器可以用：Java、Php、Go、Node.js 等语言编写，本教程采用是Node.js编写服务器，端口号为：8088，且已经配置了public文件夹为静态资源。\n点击下载服务器：\n第二步：进行前端项目打包 具体的打包命令，可以参考package.json中的scripts字段配置。\n第三步：将打包结果交给服务器 将打包生成的文件内容，放到服务器的静态资源文件夹中（上文中的public文件夹）\n第四步：测试访问前端项目 浏览器访问：http://localhost:8088即可看到我们的项目，但此时会遇到两个问题：\n页面刷新 404 ajax 请求无法发送 2.2. 解决刷新 404 问题 # 问题分析：前端项目的路由，通常分为两种工作模式，分别为：\n1、hash模式\nhash 值又称锚点，通常用于指定网页中的某个位置，例如下面的网址：\nhttps://www.cctv.com/#SUBD1605080062959435，其中的#SUBD1605080062959435就是 hash 值，hash 值只在客户端（如浏览器）中使用，是不会带给服务器的，所以使用 hash 模式时，不存在刷新 404 问题。\n2、history模式\nhistory 去掉了URL中的#号，可以让应用的URL看起来更美观，带来的问题就是刷新时，会将前端路由携带给后端，而后端没有对应资源的匹配，就出现了 404 问题。\n解决方案一：将前端路由器工作模式改为 hash 模式 —— 不太推荐。\n解决方案二：让服务器在收到未配置的GET路由时，都返回index.html即可。\n方案二最终其实是把 url 中的 path，交给了前端路由去处理，具体配置如下：\napp.get(\u0026#39;*\u0026#39;,(req,res)=\u0026gt;{ res.sendFile(__dirname + \u0026#39;/public/index.html\u0026#39;) }) 也可以借助connect-history-api-fallback中间件完成配置\nconst history = require(\u0026#39;connect-history-api-fallback\u0026#39;); app.use(history()); // 配置静态资源 app.use(express.static(__dirname + \u0026#39;/public\u0026#39;)) 使用connect-history-api-fallback可以让配置更灵活，比如/login临时不需要作为前端路由处理，就可以按照如下方式配置\napp.use(history({ verbose:false, rewrites:[ { from: /^\\/login.*$/, to: (context) =\u0026gt; context.parsedUrl.path }, ] })) 2.3. 请求无法发送问题 # 问题分析：脱离脚手架后，就没有了代理服务器，无法转发请求到【提供数据】的服务器。\n如何解决？—— 在 Node 服务器中借助http-proxy-middleware中间件配置代理，具体配置如下：\n// 引入createProxyMiddleware const { createProxyMiddleware } = require(\u0026#39;http-proxy-middleware\u0026#39;) // 配置代理中间件 app.use(\u0026#39;/dev\u0026#39;, createProxyMiddleware({ target: \u0026#39;http://sph-h5-api.atguigu.cn\u0026#39;, changeOrigin: true, pathRewrite: { \u0026#39;^/dev\u0026#39;: \u0026#39;\u0026#39; } })) 3. nginx 服务器部署 # 3.1. nginx 简介 # Nginx（发音为“engine-x”）是一款高性能的 HTTP 服务器和反向代理服务器，同时也是一个 IMAP/POP3/SMTP 代理服务器。Nginx 最初由 Igor Sysoev 编写，于 2004 年发布。它以其高性能、高稳定性、丰富的功能集和低系统资源消耗而闻名，主要功能有：\n反向代理 负载均衡 静态内容服务 HTTP/2 支持 SSL/TLS 支持 高速缓存 3.2. nginx 配置代理练习 # 今日头条接口地址：https://www.toutiao.com/hot-event/hot-board/?origin=toutiao_pc\n直接向其发送 Ajax 请求会有跨域问题，接下来我们借助nginx解决跨域问题\n配置方式一：不过滤前缀\n以解决今日头条跨域为例，不干/hot-event掉前缀配置如下:\nlocation /hot-event { # 设置代理目标 proxy_pass https://www.toutiao.com; # 允许跨域 add_header \u0026#39;Access-Control-Allow-Origin\u0026#39; \u0026#39;*\u0026#39;; add_header \u0026#39;Access-Control-Allow-Methods\u0026#39; \u0026#39;*\u0026#39;; add_header \u0026#39;Access-Control-Allow-Headers\u0026#39; \u0026#39;*\u0026#39;; add_header \u0026#39;Access-Control-Expose-Headers\u0026#39; \u0026#39;*\u0026#39;; } 前端写法\naxios.get(\u0026#39;http://localhost:8099/hot-event/hot-board/?origin=toutiao_pc\u0026#39;) 配置方式二：过滤前缀\n备注：使用下面配置删除上游服务器的指定响应头\nproxy_hide_header Access-Control-Allow-Origin; 3.3. nginx 部署前端项目 # 整体思路：让nginx充当两个角色，既是 静态内容服务器，又是代理服务器。\n修改nginx配置如下，注意nginx的根目录最好不是 C 盘 # 配置nginx根目录 location / { root D:\\dist; index index.html index.htm; } # 配置代理 location /dev/ { # 设置代理目标 proxy_pass http://sph-h5-api.atguigu.cn/; } 修改前端项目，让所有请求都转发给 /dev，随后重新打包 const request = axios.create({ baseURL:\u0026#39;/dev\u0026#39;, timeout:10000 }) 随后直接访问nginx服务器即可，例如 nginx如果运行在8099端口，则访问： http://localhost:8099 随后会遇到刷新404问题，追加nginx配置来解决 # 配置nginx根目录 location / { root D:\\dist; index index.html index.htm; try_files $uri $uri/ /index.html; # 解决刷新404 } # 配置代理 location /dev/ { # 设置代理目标 proxy_pass http://sph-h5-api.atguigu.cn/; } 4. 云服务器部署 # 我们可以在云服务器上借助nginx完成部署，大致流程与本地nginx部署一致\n关于购买云服务器，可选择：阿里云、腾讯云等。 关于操作系统，看个人习惯，Ubuntu、CentOs、RedHat、都不错。 购买完成后记得重置密码 linux 远程操作软件：Xshell、Xftp 具体配置如下： 给服务器安装nginx yum install nginx 将打包后的前端资源放在：/var/sph文件夹中。 使用Xftp配置服务器的 nginx，修改文件：/etc/nginx/nginx.config。 # For more information on configuration, see: # * Official English Documentation: http://nginx.org/en/docs/ # * Official Russian Documentation: http://nginx.org/ru/docs/ user nginx; worker_processes auto; error_log /var/log/nginx/error.log; pid /run/nginx.pid; # Load dynamic modules. See /usr/share/doc/nginx/README.dynamic. include /usr/share/nginx/modules/*.conf; events { worker_connections 1024; } http { log_format main \u0026#39;$remote_addr - $remote_user [$time_local] \u0026#34;$request\u0026#34; \u0026#39; \u0026#39;$status $body_bytes_sent \u0026#34;$http_referer\u0026#34; \u0026#39; \u0026#39;\u0026#34;$http_user_agent\u0026#34; \u0026#34;$http_x_forwarded_for\u0026#34;\u0026#39;; access_log /var/log/nginx/access.log main; sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; include /etc/nginx/mime.types; default_type application/octet-stream; # Load modular configuration files from the /etc/nginx/conf.d directory. # See http://nginx.org/en/docs/ngx_core_module.html#include # for more information. include /etc/nginx/conf.d/*.conf; server { listen 80 default_server; listen [::]:80 default_server; server_name _; root /usr/share/nginx/html; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / { root /var/sph; index index.html index.htm; try_files $uri $uri/ /index.html; # 解决刷新404 } # 配置代理 location /dev/ { # 设置代理目标 proxy_pass http://sph-h5-api.atguigu.cn/; } error_page 404 /404.html; location = /40x.html { } error_page 500 502 503 504 /50x.html; location = /50x.html { } } } ","date":"29 December 2024","externalUrl":null,"permalink":"/en/posts/%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E4%B8%8A%E7%BA%BF%E9%83%A8%E7%BD%B2/","section":"博客","summary":"","title":"前端项目上线部署","type":"posts"},{"content":"\rsdf","date":"28 July 2022","externalUrl":null,"permalink":"/en/about/","section":"Welcome to Jinwoo and Lambda 🐱 's blog","summary":"","title":"About","type":"page"},{"content":"\rsdf","date":"28 July 2022","externalUrl":null,"permalink":"/en/posts/","section":"博客","summary":"","title":"博客","type":"posts"},{"content":" 序言 # 最近面临放假。很多同学发信息请教问题，问我想入门计算机，该学习什么程序语言比较好，应该怎么学习。\n其实我在学习编程的初期也这个疑惑，之前固有的思维让我总是想找出一个最好的编程语言，于是我开始大量查阅网上帖子，反而加深了这个问题的疑惑。好像很多人都会把自己熟悉的编程语言当成最好的编程语言，并且为使用哪种程序语言争论不休。甚至还会被玩梗的误导：“PHP是世界上最好的语言”。但是实际上并不能绝对的称某某语言是最好的。于是我当时带着疑惑选择了C语言。选择的原因很简单，很多大学把C语言当成入门编程的第一门课，虽然不明原因，但是我也跟风照做了。不过现在对于我来说，任何从没见过的语言，我都是直接拿起来就用，而不需要经过学习的过程。看了这篇文章，也许你也可以和我一样做到这点。就让我们开始吧！\n抽象的概念 # 我以为抽象（abstraction）是学习计算机科学至关重要的思维方法，它可以帮助我们进行高层面的思考，而不为细节所累。\n因为计算机专科学的知识点极其繁多。想要把每一个细致的知识点全部都记住是一件非常困难的事情。而任何无法学以致用的知识都会被迅速遗忘。我们不能再像高中一样的思维模式去学习计算机科学了。林子太大了会迷路。学计算机要先长树枝后长树叶。**建立体系观念很重要。**我称其为一种自顶向下的学习方法。\n关于抽象的定义，百度百科是这样说的：\n抽象是从众多的事物中抽取出共同的、本质性的特征，而舍弃其非本质的特征的过程。具体地说，抽象就是人们在实践的基础上，对于丰富的感性材料通过去粗取精、去伪存真、由此及彼、由表及里的加工制作，形成概念、判断、推理等思维形式，以反映事物的本质和规律的方法。实际上，抽象是与具体相对应的概念，具体是事物的多种属性的总和，因而抽象亦可理解为由具体事物的多种属性中舍弃了若干属性而固定了另一些属性的思维活动。\nWikipedia 的解释是：\n抽象是指为了某种目的，对一个概念或一种现象包含的信息进行过滤，移除不相关的信息，只保留与某种最终目的相关的信息。例如，一个皮质的足球，我们可以过滤它的质料等信息，得到更一般性的概念，也就是球。从另外一个角度看，抽象就是简化事物，抓住事物本质的过程。\n简单来说，抽象的过程就是寻找共性、归纳总结、综合分析，提炼出相关概念的过程。\n所以通过自顶向下系统化学习。优点是一开始就能在心里画好知识图谱建立自己的学习路线，以后每一步学习实践都有条理，每一次投入都有点亮某个知识技能点的目标。可以快速打通在计算机科学的道路。学编程也是这样的。可能一开始比较难以理解。但是学会了后学起东西会非常迅速。\n利用抽象快速理解新的编程语言 # 我觉得任何一种“编程语言的语法”，都是各种“语言特性”的组合。这也是一种抽象的思想。把每个编程语言的语法抽象出来。找到他们共同的地方。就不需要再费劲的去学习了。\n举一些语言特性的例子：例如许多编程语言都有变量的定义。算术运算符，各种各样的循环语句例如for与while。函数定义，函数调用 。或者有自己专属特长“lambda 函数”，“类型推导”，“面向对象”，“并发编程”等等。而这些语言特性，就像你选购面包一样。面包的基本成分大都相同，但是他们有各自不同的味道。而每个人喜欢吃的东西也不太一样。但是不能说某个口味就不好吃。而是每种面包都有自己独特的风味。\n程序语言也是一样的道理。对于初学者来说，其实没必要纠结到底要先学哪一种语言，再学哪一种。许多人的选择困难症犯了，纠结了好几个星期非要选个最好的，结果一个语言都还没开始学。可有这纠结的时间，其实都可以把他纠结过的语言全部掌握了。\n但是这和我所说的快速学习新的编程语言有什么关系呢。但是实际上。每一种语言里面必然有一套“通用”的特性。比如变量，函数，整数和浮点数运算，等等。这些是每个通用程序语言里面都会有的，一个都不能少。你只要通过“某种你喜欢的语言”学会了这些特性，掌握这些特性的根本概念，就能随时把这些知识应用到任何其它语言。你为此投入的时间基本不会浪费。所以不需要纠结要“先学哪种语言”，这种时间花的很不值得，还不如随便挑一个语言，跳进去。\n但是我是如何记住这么多语言的语法呢。其实我能记住我最常用的编程语言的语法。别的语言的语法其实也不能很好的记住。可是这个时候我也不会去看相应语言的课程教学。或者是发行的书籍，因为当我使用非常用语言进行编程的时候，通常只是因为用“某一个语言”完成“某一件事”比较方便快速。所以我不会完完全全把这个语言学透。我只会查询官方的文档，把需要用的知识大概的看一遍，了解一下基础语法，例如“变量怎么定义啦”。是“强类型语言”还是“弱类型语言”。定义函数是什么语法，有没有“权限修饰符”。输入输出等等基础语法。而这些恰恰就是编程语言的语法特性，他们的概念其实是相同的。只是语法不太一样。就像“Hello”和“你好”表达的都是同一个东西一样。所以大概花个把小时就可以上手该语言了，当然用新的编程语言中一定会遇到许许多多的问题，善于使用搜索引擎可以帮助你很好的解决问题。而不是习惯性的问别人。这也便是上文提到的自顶向下的学习方法的具体体现。\n总结 # 重要的是学会抽象，并且学会如何抽象出编程语言中的语言特性，只有这样才能达到融会贯通，拿起任何语言几乎立即就会用。另外推荐观看课程或者书籍： “Structure and Interpretation of Computer Programs”\n","date":"27 May 2021","externalUrl":null,"permalink":"/en/posts/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E6%96%B0%E7%9A%84%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/","section":"博客","summary":"","title":"如何快速学习新的编程语言","type":"posts"},{"content":"","externalUrl":null,"permalink":"/en/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/en/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/en/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"}]